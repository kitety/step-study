[{"C:\\Users\\kitety\\Documents\\my\\step-study\\demos\\react-hooks\\src\\index.js":"1"},{"size":6344,"mtime":1606137438470,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"fxu8r4","C:\\Users\\kitety\\Documents\\my\\step-study\\demos\\react-hooks\\src\\index.js",["7","8","9","10","11","12"],"import React from \"react\";\nimport ReactDom from \"react-dom\";\n\n/**\n * useEffect\n */\n\nlet hookState = []; //保存所有状态\nlet hookIndex = 0; //索引\n\n// 每次渲染都会调用的\nfunction useState(initialState) {\n  hookState[hookIndex] = hookState[hookIndex] || initialState;\n  // currentIndex 函数里面 不会变\n  let currentIndex = hookIndex;\n  function setState(newState) {\n    if (typeof newState === \"function\") {\n      // state的传递\n      hookState[currentIndex] = newState(hookState[currentIndex]);\n    } else {\n      hookState[currentIndex] = newState;\n    }\n    render();\n  }\n  return [hookState[hookIndex++], setState];\n}\n\n/**\n *\n * @param {*} callback 函数\n * @param {*} dependencies 依赖项\n */\nfunction useCallback(callback, dependencies) {\n  if (hookState[hookIndex]) {\n    //说明不是第一次\n    let [lastCallback, lastDependencies] = hookState[hookIndex];\n    // 比较依赖 每一项都比较 新旧是不是一样的\n    let same = dependencies.every(\n      (item, index) => item === lastDependencies[index]\n    );\n    if (same) {\n      // 一样的 不需要修改\n      hookIndex++;\n      return lastCallback;\n    } else {\n      // 不一样\n      hookState[hookIndex++] = [callback, dependencies];\n      return callback;\n    }\n  } else {\n    // 第一次\n    hookState[hookIndex++] = [callback, dependencies];\n    return callback;\n  }\n}\n/**\n *\n * @param {*} callback 对象\n * @param {*} dependencies 依赖项\n */\nfunction useMemo(factory, dependencies) {\n  // 每次都会执行 从0 开始 然后每次其实index都是一样 还是可以用currentIndex来存一遍\n\n  if (hookState[hookIndex]) {\n    //说明不是第一次\n    let [lastMemo, lastDependencies] = hookState[hookIndex];\n    // 比较依赖 每一项都比较 新旧是不是一样的\n    let same = dependencies.every(\n      (item, index) => item === lastDependencies[index]\n    );\n    if (same) {\n      // 一样的 不需要修改\n      hookIndex++;\n      return lastMemo;\n    } else {\n      // 不一样\n      let newMemo = factory();\n      hookState[hookIndex++] = [newMemo, dependencies];\n      return newMemo;\n    }\n  } else {\n    // 第一次\n    let memo = factory();\n    hookState[hookIndex++] = [memo, dependencies];\n    return memo;\n  }\n}\n\nfunction useEffect(callback, dependencies) {\n  if (hookState[hookIndex]) {\n    let [oldDestory, lastDependencies] = hookState[hookIndex];\n    // 比较依赖 每一项都比较 新旧是不是一样的\n    let same = dependencies.every(\n      (item, index) => item === lastDependencies[index]\n    );\n    if (same) {\n      hookIndex++;\n    } else {\n      oldDestory();\n      // 宏任务\n      let destory = callback();\n      hookState[hookIndex++] = [destory, dependencies];\n      // 宏任务 本次渲染之后执行\n    }\n  } else {\n    // 宏任务\n    let destory = callback();\n    hookState[hookIndex++] = [destory, dependencies];\n  }\n}\nfunction useLayoutEffect(callback, dependencies) {\n  if (hookState[hookIndex]) {\n    let lastDependencies = hookState[hookIndex];\n    // 比较依赖 每一项都比较 新旧是不是一样的\n    let same = dependencies.every(\n      (item, index) => item === lastDependencies[index]\n    );\n    if (same) {\n      hookIndex++;\n    } else {\n      hookState[hookIndex++] = dependencies;\n      // 微任务 浏览器渲染前之情\n      queueMicrotask(callback);\n      // callback();\n    }\n  } else {\n    hookState[hookIndex++] = dependencies;\n    // 微任务 浏览器渲染前之情\n    queueMicrotask(callback);\n    // callback();\n  }\n}\nfunction useContext(context) {\n  return context._currentValue;\n}\nfunction Counter() {\n  // 每次渲染你都执行 每次都要声明新对象\n  const [number, setNumber] = useState(0);\n  const [name, setName] = useState(\"hello\");\n  useEffect(() => {\n    document.title = number;\n    console.log(number);\n  }, [number]);\n\n  return (\n    <div>\n      <p>number:{number}</p>\n      <p>name:{name}</p>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <button\n        onClick={() => {\n          setNumber(1 + number);\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n\nfunction Animation() {\n  let red = React.useRef();\n  let green = React.useRef();\n  // 宏任务结束后清空微任务 再去浏览器更新渲染\n  useLayoutEffect(() => {\n    // 微任务 先\n    red.current.style.transform = \"translate(500px)\";\n    red.current.style.transition = \"all 500ms\";\n  });\n  useEffect(() => {\n    // 宏任务 后\n    green.current.style.transform = \"translate(500px)\";\n    green.current.style.transition = \"all 500ms\";\n  });\n  let style = { width: \"100px\", height: \"100px\" };\n  return (\n    <div>\n      <div style={{ ...style, backgroundColor: \"red\" }} ref={red}></div>\n      <div style={{ ...style, backgroundColor: \"green\" }} ref={green}></div>\n    </div>\n  );\n}\n\n// context 上下文\n// 两个概念 提供者 消费者\nlet ReactContext = React.createContext();\nconsole.log(\"ReactContext\", ReactContext);\nfunction Counter1() {\n  // 返回这个对象{ state, setState }\n  let { state, setState } = useContext(ReactContext);\n  return (\n    <div>\n      <p>{state.number}</p>\n      <button\n        onClick={() => {\n          setState({ number: state.number + 1 });\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n}\nfunction Counter2() {\n  // 返回这个对象{ state, setState }\n  return (\n    <ReactContext.Consumer>\n      {({ state, setState }) => (\n        <div>\n          <p>{state.number}</p>\n          <button\n            onClick={() => {\n              setState({ number: state.number + 1 });\n            }}\n          >\n            +\n          </button>\n        </div>\n      )}\n    </ReactContext.Consumer>\n  );\n}\nfunction App() {\n  const [state, setState] = React.useState({ number: 0 });\n  return (\n    <ReactContext.Provider value={{ state, setState }}>\n      <Counter1 />\n    </ReactContext.Provider>\n  );\n}\n\nfunction UseEffectDestory() {\n  const [number, setNumber] = useState(0);\n  useEffect(() => {\n    let timer = setInterval(() => {\n      setNumber((a) => a + 1);\n    }, 1000);\n    return () => {\n      console.log(\"clear \");\n      clearInterval(timer);\n    };\n  }, [number]);\n  return <div>{number}</div>;\n}\nfunction render() {\n  hookIndex = 0;\n  ReactDom.render(<UseEffectDestory />, document.getElementById(\"root\"));\n}\nrender();\n",{"ruleId":"13","severity":1,"message":"14","line":33,"column":10,"nodeType":"15","messageId":"16","endLine":33,"endColumn":21},{"ruleId":"13","severity":1,"message":"17","line":61,"column":10,"nodeType":"15","messageId":"16","endLine":61,"endColumn":17},{"ruleId":"13","severity":1,"message":"18","line":136,"column":10,"nodeType":"15","messageId":"16","endLine":136,"endColumn":17},{"ruleId":"13","severity":1,"message":"19","line":161,"column":10,"nodeType":"15","messageId":"16","endLine":161,"endColumn":19},{"ruleId":"13","severity":1,"message":"20","line":204,"column":10,"nodeType":"15","messageId":"16","endLine":204,"endColumn":18},{"ruleId":"13","severity":1,"message":"21","line":223,"column":10,"nodeType":"15","messageId":"16","endLine":223,"endColumn":13},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","'Counter' is defined but never used.","'Animation' is defined but never used.","'Counter2' is defined but never used.","'App' is defined but never used."]
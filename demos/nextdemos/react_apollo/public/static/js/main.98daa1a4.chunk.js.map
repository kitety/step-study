{"version":3,"sources":["img/logo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","console","log","className","classnames","launch_success","mission_name","format","launch_date_local","to","flight_number","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","map","key","Component","LAUNCH_QUERY","Launch","props","useQuery","variables","Number","match","params","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98daa1a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2bee2ac0.jpg\";","import React, { Component } from 'react'\r\nimport classnames from 'classnames'\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst LaunchItem = ({ launch }) => {\r\n  console.log(launch)\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>Mission：<span className={classnames({ 'text-success': launch.launch_success, 'text-danger': !launch.launch_success })}>{launch.mission_name}</span></h4>\r\n          <p>Date：<Moment format=\"YYYY-MM-DD HH:mm\">{launch.launch_date_local}</Moment></p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <Link to={`/launch/${launch.flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n        </div>\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default LaunchItem\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst MissionKey = () => {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p><span className=\"px-3 mb-2 bg-success\"></span>=Success</p>\r\n      <p><span className=\"px-3 mb-2 bg-danger\"></span>=Fail</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MissionKey\r\n\r\n","import React, { Component } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Query } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n// import gql  from 'graphql-tag';\r\nimport LaunchItem from './LaunchItem'\r\nimport MissionKey from './MissionKey'\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  {\r\n    Launches{\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n      launch_year\r\n    }\r\n  }\r\n`;\r\nclass Launches extends Component {\r\n  render () {\r\n    return (\r\n      <>\r\n        <h1 className=\"dispaly-4 my-3\">Launches</h1>\r\n        <MissionKey/>\r\n        <Query query={LAUNCHES_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) {\r\n              return <h4>loading...</h4>\r\n            } else if (error) {\r\n              return <h4>error</h4>\r\n            }\r\n            console.log(data);\r\n            return <>\r\n              {\r\n                data.Launches.map(launch => <LaunchItem key={launch.flight_number} launch={launch} />)\r\n              }\r\n            </>\r\n          }}\r\n        </Query>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Launches\r\n\r\n","import React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\n// import { gql } from 'apollo-boost';\r\nimport gql from 'graphql-tag';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number:Int!){\r\n    Launch(flight_number:$flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n      launch_year\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launch = (props) => {\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, { variables: { flight_number: Number(props.match.params.flight_number) } });\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  const { flight_number,\r\n    mission_name,\r\n    launch_date_local,\r\n    launch_success,\r\n    launch_year,\r\n    rocket: {\r\n      rocket_id,\r\n      rocket_name,\r\n      rocket_type\r\n    } } = data.Launch\r\n  console.log(data)\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        <span className=\"text-dark\">Mission：</span>{mission_name}\r\n      </h1>\r\n      <h4 className=\"mb-3\">\r\n        Launch Details\r\n      </h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Flight Number：{flight_number}</li>\r\n        <li className=\"list-group-item\">Flight Year：{launch_date_local}</li>\r\n        <li className=\"list-group-item\">Flight Success：{launch_success ? 'Yes' : 'NO'}</li>\r\n      </ul>\r\n      <h4 className=\"mb-3\">\r\n        Rocket Details\r\n      </h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Rocket Id：{rocket_id}</li>\r\n        <li className=\"list-group-item\">Rocket Name：{rocket_name}</li>\r\n        <li className=\"list-group-item\">Rocket Type：{rocket_type}</li>\r\n      </ul>\r\n      <hr/>\r\n      <Link to='/' className=\"btn btn-secondary\">Index</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Launch\r\n\r\n","import React from 'react';\nimport logo from './img/logo.jpg'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Launches from './components/Launches'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport ApolloClient from 'apollo-boost';\nimport Launch from './components/Launch'\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\nfunction App () {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: '300px', display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
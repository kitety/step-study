[{"C:\\Users\\kitety\\Documents\\my\\step-study\\demos\\react-fiber-2\\src\\index.js":"1","C:\\Users\\kitety\\Documents\\my\\step-study\\demos\\react-fiber-2\\src\\element.js":"2"},{"size":4557,"mtime":1606382275355,"results":"3","hashOfConfig":"4"},{"size":539,"mtime":1606373567383,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1fyqq7k",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kitety\\Documents\\my\\step-study\\demos\\react-fiber-2\\src\\index.js",["11","12"],"import element from \"./element\";\nlet container = document.getElementById(\"root\");\nconst PLACEMENT = \"PLACEMENT\";\nconst UPDATE = \"UPDATE\";\nconst REMOVE = \"REMOVE\";\n\n// 下一个工作单元\n// 初始化\n// fiber 也是一个js对象\n// 应用的根\nlet workInProcessRoot = {\n  stateNode: container, // 此fiber对应的DOM节点\n  props: {\n    children: [element],\n  },\n  // child 大儿子 return 父亲 sibling 兄弟\n};\n// 赋值给下一个工作单元\nlet nextUnitOfWork = workInProcessRoot;\nfunction workLoop(deadLine) {\n  // 有工作单元就执行\n  while (nextUnitOfWork && deadLine.timeRemaining() > 0) {\n    // 传入工作单元 但会下一个工作单元\n    nextUnitOfWork = performUnitWork(nextUnitOfWork);\n  }\n  if (!nextUnitOfWork && workInProcessRoot) {\n    commitRoot();\n  }\n  requestIdleCallback(workLoop);\n}\n\nfunction commitRoot() {\n  console.log(workInProcessRoot);\n  let currentFiber = workInProcessRoot.firstEffect; //c1\n  while (currentFiber) {\n    console.log(\"commitRoot\", currentFiber.props.id);\n    if (currentFiber.effectTag === PLACEMENT) {\n      currentFiber.return.stateNode.appendChild(currentFiber.stateNode);\n    }\n    currentFiber = currentFiber.nextEffect;\n  }\n  workInProcessRoot = null;\n}\n/**\n * beginWork 1.创建真实DOM 通过虚拟DOM创建fiber树结构\n * @param {*} workInProgressFiber 当前工作的fiber\n */\nfunction performUnitWork(workInProgressFiber) {\n  // 1.创建真实DOM 并不挂载  2.创建fiber子树\n  beginWork(workInProgressFiber);\n  // 有儿子就返回儿子 深度优先\n  if (workInProgressFiber.child) {\n    return workInProgressFiber.child;\n  }\n  while (workInProgressFiber) {\n    // 没有儿子 当前节点就结束了\n    completeUnitOfWork(workInProgressFiber);\n    // 兄弟就返回兄弟\n    if (workInProgressFiber.sibling) {\n      return workInProgressFiber.sibling;\n    }\n    // 指向父亲再循环\n    workInProgressFiber = workInProgressFiber.return;\n  }\n}\n/**\n *\n * 创建DOM节点\n */\nfunction beginWork(workInProgressFiber) {\n  console.log(\"开始\", workInProgressFiber.props.id);\n  if (!workInProgressFiber.stateNode) {\n    // 创建一个真实dom元素\n    workInProgressFiber.stateNode = document.createElement(\n      workInProgressFiber.type\n    );\n    // 属性处理\n    for (const key in workInProgressFiber.props) {\n      if (\n        Object.hasOwnProperty.call(workInProgressFiber.props, key) &&\n        key !== \"children\"\n      ) {\n        const element = workInProgressFiber.props[key];\n        workInProgressFiber.stateNode[key] = element;\n      }\n    }\n  }\n  /* 在beginwork里面是不会挂载的 */\n  // 创建子fiber\n  let previousFiber;\n  // children 是一个虚拟DOM的数组\n  workInProgressFiber.props.children &&\n    workInProgressFiber.props.children.forEach((child, index) => {\n      let childFiber = {\n        type: child.type, //类型\n        props: child.props, //属性\n        return: workInProgressFiber, // 父亲\n        effectTag: PLACEMENT, // 副作用标记 插入到父 DOM\n        nextEffectTag: null, // 下一个有副作用的节点\n      };\n      // 赋值给儿子和silibing\n      if (index === 0) {\n        workInProgressFiber.child = childFiber;\n      } else {\n        previousFiber.sibling = childFiber;\n      }\n      // 缓存一下 用来放sibling\n      previousFiber = childFiber;\n    });\n}\nfunction completeUnitOfWork(workInProgressFiber) {\n  console.log(\"完成\", workInProgressFiber.props.id);\n  // 构建副作用链 effectList 只有 有副作用的节点\n\n  // 链表 完成的顺序\n  // firstEffect 指向第一个有副作用的子节点\n  // lastEffect 指向第最后一个有副作用的子节点\n\n  let returnFiber = workInProgressFiber.return; // A1\n  if (returnFiber) {\n    // 把当前fiber的有副作用的子链表 挂载到父亲身上\n    if (!returnFiber.firstEffect) {\n      returnFiber.firstEffect = workInProgressFiber.firstEffect;\n    }\n    if (workInProgressFiber.lastEffect) {\n      //C2\n      if (returnFiber.lastEffect) {\n        returnFiber.lastEffect.nextEffect = workInProgressFiber.firstEffect;\n      }\n      returnFiber.lastEffect = workInProgressFiber.lastEffect;\n    }\n    // 把自己挂到后面去\n    if (workInProgressFiber.effectTag) {\n      if (returnFiber.lastEffect) {\n        //对象为空\n        returnFiber.lastEffect.nextEffect = workInProgressFiber;\n      } else {\n        returnFiber.firstEffect = workInProgressFiber;\n      }\n      returnFiber.lastEffect = workInProgressFiber;\n    }\n  }\n}\n// 空闲的时候执行wotkloop\nrequestIdleCallback(workLoop);\n","C:\\Users\\kitety\\Documents\\my\\step-study\\demos\\react-fiber-2\\src\\element.js",["13"],{"ruleId":"14","severity":1,"message":"15","line":4,"column":7,"nodeType":"16","messageId":"17","endLine":4,"endColumn":13},{"ruleId":"14","severity":1,"message":"18","line":5,"column":7,"nodeType":"16","messageId":"17","endLine":5,"endColumn":13},{"ruleId":"19","severity":1,"message":"20","line":1,"column":1,"nodeType":"21","endLine":34,"endColumn":3},"no-unused-vars","'UPDATE' is assigned a value but never used.","Identifier","unusedVar","'REMOVE' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]